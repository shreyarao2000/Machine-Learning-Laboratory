import pandas as pn
import numpy as np

data = pn.read_csv('datasets.csv')
k=3
cent=[[data['x1'][0],data['x2'][0]],[data['x1'][3],data['x2'][3]],[data['x1'][5],data['x2'][5]]]
dt=[]
for i in range(len(data)):
        dt.append([data['x1'][i],data['x2'][i]])
dt=np.array(dt)
dist=[]

print("Centroid 1")
for i in range(len(dt)):
    dist.append(np.linalg.norm(dt[i]-cent[0]))
print(dist)

dist1=[]
print("Centroid 2")
for i in range(len(dt)):
    dist1.append(np.linalg.norm(dt[i]-cent[1]))
print(dist1)

dist2=[]
print("Centroid 3")
for i in range(len(dt)):
    dist2.append(np.linalg.norm(dt[i]-cent[2]))
print(dist2)

cluster1=[]
cluster2=[]
cluster3=[]
for i in range(len(dist)):
    
        if dist[i]==0:
            cluster1.append(dist[i])
        elif dist1[i]==0:
            cluster2.append(dist1[i])
        elif dist2[i]==0:
            cluster3.append(dist2[i])
        else:
            x=min(dist[i],dist1[i],dist2[i])
            if x in dist:
                cluster1.append(x)
            elif x in dist1:
                cluster2.append(x)
            else:
                cluster3.append(x)

print("Clusters")
print(cluster1)
print(cluster2)
print(cluster3)


OUTPUT:
Centroid 1
[0.0, 1.3341664064126342, 0.5000000000000001, 1.2000000000000002, 1.077032961426901, 0.9219544457292891, 1.004987562112089, 0.8062257748298548, 1.0000000000000002, 0.22360679774997896]
Centroid 2
[1.2000000000000002, 0.3162277660168384, 1.5524174696260025, 0.0, 1.2806248474865696, 0.3605551275463989, 0.22360679774997916, 2.0024984394500787, 0.7211102550927972, 1.3152946437965904]
Centroid 3
[0.9219544457292891, 0.4123105625617664, 1.216552506059644, 0.3605551275463989, 1.3, 0.0, 0.1414213562373093, 1.7029386365926404, 0.8062257748298547, 1.0]
Clusters
[0.0, 0.5000000000000001, 1.077032961426901, 0.8062257748298548, 0.22360679774997896]
[0.3162277660168384, 0.0, 0.7211102550927972]
[0.0, 0.1414213562373093]

TO FIND NEW CENTROID
import numpy as np
import pandas as pd
from copy import deepcopy


def euclidean(a,b, ax=1):
    return np.linalg.norm(a-b, axis=ax)


def main():
    k = 3
    X = pd.read_csv('datasets.csv',index_col=False)
    print(X)

    x1 = X['x1'].values
    x2 = X['x2'].values
    X = np.array(list(zip(x1, x2)))
    print(X)
    C_x = [6.2, 6.6 ,6.5]
    C_y = [3.2, 3.7, 3.0]
    Centroid = np.array(list(zip(C_x, C_y)), dtype=np.float32)
    print("Initial Centroids")
    print(Centroid.shape)

    Centroid_old = np.zeros(Centroid.shape)
    print(Centroid_old)
    # Cluster Lables(0, 1, 2)
    clusters = np.zeros(len(X))
    print(clusters)
    error = euclidean(Centroid, Centroid_old, None)
    print(error)
    iterr = 0
    # Loop will run till the error becomes zero
    while error != 0:
        # Assigning each value to its closest cluster
        iterr = iterr + 1
        for i in range(len(X)):
            #print(X[i])
            distances = euclidean(X[i], Centroid)
            #print(distances)
            cluster = np.argmin(distances)
            clusters[i] = cluster

        Centroid_old = deepcopy(Centroid)
        
        # Finding the new centroids by taking the Mean
        for p in range(k):
            points = [X[j] for j in range(len(X)) if clusters[j] == p]
            Centroid[p] = np.mean(points, axis=0)
        print(" Centre of the clusters after ", iterr," Iteration \n", Centroid)
        error = euclidean(Centroid, Centroid_old, None)
        print("Error  ... ",error)  
    

if __name__ == "__main__": 
    main()

OUTPUT:
    x1   x2
0  5.9  3.2
1  4.6  2.9
2  6.2  2.8
3  4.7  3.2
4  5.5  4.2
5  5.0  3.0
6  4.9  3.1
7  6.7  3.1
8  5.1  3.8
9  6.0  3.0
[[5.9 3.2]
 [4.6 2.9]
 [6.2 2.8]
 [4.7 3.2]
 [5.5 4.2]
 [5.  3. ]
 [4.9 3.1]
 [6.7 3.1]
 [5.1 3.8]
 [6.  3. ]]
Initial Centroids
(3, 2)
[[0. 0.]
 [0. 0.]
 [0. 0.]]
[0. 0. 0. 0. 0. 0. 0. 0. 0. 0.]
12.537144692236463
 Centre of the clusters after  1  Iteration 
 [[5.1714287 3.1714287]
 [5.5       4.2      ]
 [6.45      2.95     ]]
Error  ...  1.5886393
 Centre of the clusters after  2  Iteration 
 [[4.8   3.05 ]
 [5.3   4.   ]
 [6.2   3.025]]
Error  ...  0.5484787
 Centre of the clusters after  3  Iteration 
 [[4.8   3.05 ]
 [5.3   4.   ]
 [6.2   3.025]]
Error  ...  0.0

